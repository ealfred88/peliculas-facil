<!-- sections/home-pelicula-residencial.liquid -->

{%- style -%}
  .pelicula-residencial {
    background-color: #fff;
    border-radius: 20px;
    margin-top: 40px;
    padding: 48px;
  }
  .pelicula-residencial__content {
    display: flex;
    gap: 40px;
    align-items: flex-start;
  }
  .pelicula-residencial__image {
    flex: 0 0 400px;
  }
  .pelicula-residencial__image img {
    width: 100%;
    height: auto;
    border-radius: 10px;
  }
  .pelicula-residencial__details {
    flex: 1;
  }
  .pelicula-residencial__title {
    color: #000;
    font-size: 28px;
    font-weight: 600;
    margin: 0;
  }
  .pelicula-residencial__subtitle {
    color: #000;
    font-size: 16px;
    margin: 8px 0;
    font-weight: 600;
  }
  .pelicula-residencial__price {
    font-size: 32px;
    font-weight: 600;
    color: #5ABB46;
    line-height: 1;
    margin-bottom: 24px;
  }
  .variant-list {
    margin-bottom: 14px;
  }
  .variant-item {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px 0;
    border-bottom: 1px solid #f0f0f0;
  }
  .variant-item:last-child {
    border-bottom: none;
  }
  .variant-item {
    margin-bottom: 12px;
  }
  .variant-number {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 14px;
    margin-right: 16px;
  }
  .variant-options {
    display: flex;
    gap: 16px;
    flex: 1;
  }
  .variant-option {
    flex: 1;
  }
  .variant-option label {
    display: block;
    font-size: 12px;
    color: #666;
    margin-bottom: 4px;
  }
  .variant-option select {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }
  .variant-add-btn {
    background: #5ABB46;
    color: white;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    font-size: 12px;
    white-space: nowrap;
    transition: background 0.3s ease;
  }
  .variant-add-btn:hover {
    background: #4A9B3A;
  }
  .variant-add-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  .variant-add-btn.added {
    background: #28a745;
  }
  .variant-add-btn.added:after {
    content: " ✓";
  }
  .add-variant-btn {
    text-decoration: underline;
    cursor: pointer;
    font-size: 14px;
    margin-bottom: 24px;
  }
  .variant-summary {
    background: #eee;
    padding: 24px;
    border-radius: 8px;
    margin-bottom: 24px;
  }
  .variant-summary-total {
  
  }
  .variant-summary-row-quantity {
    width: 120px;
    display: flex;
    justify-content: center;
    text-align: center;
  }
  .variant-summary-row-price {
    width: 120px;
  }
  #valor-total {
    font-size: 24px;
    font-weight: 600;
    color: #5ABB46;
    line-height: 1;
  }
  .condicao-parcela {
    font-size: 14px
  }
  .action-buttons {
    height: 40px;
    display: flex;
    gap: 16px;
  }
  .btn-comprar {
    background: #5ABB46;
    color: white;
    padding: 8px 16px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    height: 100%;
    transition: background 0.3s ease, color 0.3s ease;
  }
  .btn-comprar:hover {
    background: #3B6330;
    color: #fff;
  }
  .btn-detalhes {
    background: transparent;
    color: #000;
    padding: 8px 16px;
    border: 1px solid #ccc;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    font-size: 16px;
    height: 100%;
    transition: background 0.3s ease, color 0.3s ease;
  }
  .btn-detalhes:hover {
    background: #215AA8;
    color: #fff;
    border: 1px solid #215AA8;
  }
{%- endstyle -%}

{% comment %} Buscar produto das configurações ou produto padrão {% endcomment %}
{% if section.settings.featured_product %}
  {% assign target_product = section.settings.featured_product %}
{% else %}
  {% assign target_product = all_products['pelicula-nano-ceramica-residencial'] %}
  {% unless target_product %}
    {% for product in collections.all.products limit: 1 %}
      {% assign target_product = product %}
      {% break %}
    {% endfor %}
  {% endunless %}
{% endif %}

{% assign section_title = section.settings.section_title | default: 'Película Nano Cerâmica Residencial' %}
{% assign section_subtitle = section.settings.section_subtitle | default: 'Compra por metro ²' %}
{% assign max_installments = section.settings.max_installments | default: 5 %}

<section class="container pelicula-residencial">
  {% if target_product %}
    <div class="pelicula-residencial__content">
      <div class="pelicula-residencial__image">
        <img 
          src="{{ target_product.featured_image | image_url: width: 600 }}" 
          alt="{{ target_product.title }}"
          width="600"
          height="400"
        />
      </div>
      
      <div class="pelicula-residencial__details">
        <h2 class="pelicula-residencial__title">{{ section_title }}</h2>
        <p class="pelicula-residencial__subtitle">{{ section_subtitle }}</p>
        
        <div class="pelicula-residencial__price">
          R$ {{ target_product.price | money_without_currency | replace: ',', '.' }}m²
          <small style="font-size: 14px; color: #000; font-weight: 400;">em até {{ max_installments }}x <b>sem juros</b></small>
        </div>
        
        <form action="{{ routes.cart_add_url }}" method="post" id="variant-form" style="display: none;">
          <!-- Formulário oculto para submissão individual -->
          <input type="hidden" name="id" value="{{ target_product.selected_or_first_available_variant.id }}">
          <input type="hidden" name="properties[Largura]" value="" id="hidden-largura">
          <input type="hidden" name="properties[Altura]" value="" id="hidden-altura">
          <input type="hidden" name="properties[Quantidade]" value="" id="hidden-quantidade">
          <input type="hidden" name="properties[Tonalidade]" value="" id="hidden-tonalidade">
        </form>

        <!-- Formulário de fallback tradicional -->
        <form action="{{ routes.cart_add_url }}" method="post" id="fallback-form" style="display: none;">
          <input type="hidden" name="id" value="{{ target_product.selected_or_first_available_variant.id }}">
          <input type="hidden" name="properties[Largura]" value="" id="fallback-largura">
          <input type="hidden" name="properties[Altura]" value="" id="fallback-altura">
          <input type="hidden" name="properties[Quantidade]" value="" id="fallback-quantidade">
          <input type="hidden" name="properties[Tonalidade]" value="" id="fallback-tonalidade">
          <button type="submit" style="display: none;" id="fallback-submit"></button>
        </form>

        <div class="variant-list" id="variant-list">
          <div class="d-flex justify-content-center align-items-end variant-item" data-variant-index="1">
            <div class="variant-number">1</div>
            <div class="variant-options">
              <div class="variant-option">
                <label>Largura:</label>
                <select name="largura_1" data-option="largura" data-index="1">
                  {% for option in target_product.options %}
                    {% if option contains 'Largura' or option contains 'largura' %}
                      {% for value in target_product.options[forloop.index0].values %}
                        <option value="{{ value }}">{{ value }}</option>
                      {% endfor %}
                    {% else %}
                      <option value="1,42 m">1,42 m</option>
                      <option value="1,52 m">1,52 m</option>
                    {% endif %}
                    {% break %}
                  {% endfor %}
                </select>
              </div>
              <div class="variant-option">
                <label>Altura:</label>
                <select name="altura_1" data-option="altura" data-index="1">
                  <option value="50 cm">50 cm</option>
                  <option value="60 cm">60 cm</option>
                  <option value="70 cm">70 cm</option>
                  <option value="80 cm">80 cm</option>
                  <option value="90 cm">90 cm</option>
                  <option value="100 cm">100 cm</option>
                </select>
              </div>
              <div class="variant-option">
                <label>Quantidade:</label>
                <select name="quantidade_1" data-option="quantidade" data-index="1">
                  {% for i in (1..20) %}
                    <option value="{{ i }}" {% if i == 1 %}selected{% endif %}>{{ i }}</option>
                  {% endfor %}
                </select>
              </div>
              <div class="variant-option">
                <label>Tonalidade:</label>
                <select name="tonalidade_1" data-option="tonalidade" data-index="1">
                  {% if section.blocks.size > 0 %}
                    {% for block in section.blocks %}
                      {% if block.type == 'tonalidade' %}
                        <option value="{{ block.settings.value }}">{{ block.settings.label }}</option>
                      {% endif %}
                    {% endfor %}
                  {% else %}
                    {% comment %} Fallback: usar variantes do produto ou valores padrão {% endcomment %}
                    {% for variant in target_product.variants limit: 5 %}
                      {% if variant.title != 'Default Title' %}
                        <option value="{{ variant.title }}">{{ variant.title }}</option>
                      {% else %}
                        <option value="G 35">G 35</option>
                        <option value="G 50">G 50</option>
                        <option value="G 70">G 70</option>
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                </select>
              </div>
            </div>
            <button type="button" class="variant-add-btn" onclick="addToCart(1)" id="add-btn-1">
              Adicionar
            </button>
          </div>
        </div>
          
          <div class="variant-summary d-flex justify-content-between">
            <div class="variant-summary-row variant-summary-row-price d-flex flex-column col-4">
              <span>Valor m²:</span>
              <span id="valor-m2"><b>R$ {{ target_product.price | money_without_currency }}</b></span>
            </div>
            <div class="variant-summary-row variant-summary-row-quantity justify-content-start d-flex flex-column col-4">
              <span>Total no carrinho:</span>
              <span id="total-carrinho"><b>0</b></span>
            </div>
            <div class="variant-summary-total d-flex flex-column col-4">
              <span>Valor total carrinho:</span>
              <span id="valor-total-carrinho">R$ 0,00</span>
              <span class="condicao-parcela">Em até {{ max_installments }}x de R$ <span id="parcela-carrinho">0,00</span> sem juros</span>
            </div>
          </div>
          
          <div class="action-buttons">
            <button type="button" class="btn-comprar" onclick="openCart()">Ver Carrinho</button>
            <a href="{{ target_product.url }}" class="btn-detalhes">Ver mais detalhes</a>
          </div>
      </div>
    </div>
  {% else %}
    <div class="pelicula-residencial__content">
      <p>Produto não encontrado. Configure um produto específico nas configurações da seção.</p>
    </div>
  {% endif %}
</section>

<script>
  let variantCounter = 1;
  let cartTotal = 0;
  let cartItems = 0;
  const basePrice = {{ target_product.price | default: 8990 }};
  const maxInstallments = {{ max_installments }};
  const variantId = "{{ target_product.selected_or_first_available_variant.id }}";
  
  // Tonalidades configuradas no schema
  const tonalidadeOptions = [
    {% if section.blocks.size > 0 %}
      {% for block in section.blocks %}
        {% if block.type == 'tonalidade' %}
          { value: "{{ block.settings.value }}", label: "{{ block.settings.label }}" }{% unless forloop.last %},{% endunless %}
        {% endif %}
      {% endfor %}
    {% else %}
      { value: "G 35", label: "G 35" },
      { value: "G 50", label: "G 50" },
      { value: "G 70", label: "G 70" }
    {% endif %}
  ];
  
  // Debug imediato
  console.log('Configuração inicial:', {
    variantId,
    basePrice,
    maxInstallments,
    product: '{{ target_product.title | default: "Não encontrado" }}'
  });

  function addToCart(index) {
    const variant = document.querySelector(`[data-variant-index="${index}"]`);
    const button = document.getElementById(`add-btn-${index}`);
    
    if (!variant || button.disabled) return;
    
    // Pegar valores do item
    const largura = variant.querySelector('[data-option="largura"]').value;
    const altura = variant.querySelector('[data-option="altura"]').value;
    const quantidade = parseInt(variant.querySelector('[data-option="quantidade"]').value);
    const tonalidade = variant.querySelector('[data-option="tonalidade"]').value;
    
    // Calcular área e valor
    const larguraNum = parseFloat(largura.replace(/[^\d,]/g, '').replace(',', '.')) || 1.42;
    const alturaNum = parseFloat(altura.replace(/[^\d]/g, '')) / 100 || 0.5;
    const area = larguraNum * alturaNum;
    const itemValue = area * (basePrice / 100) * quantidade;
    
    // Debug - verificar valores
    console.log('Dados do produto:', {
      largura: largura,
      altura: altura,
      quantidade: quantidade,
      tonalidade: tonalidade,
      area: area,
      itemValue: itemValue,
      variantId: variantId
    });
    
    // Preencher formulário oculto com quantidade como 1 (sempre)
    document.getElementById('hidden-largura').value = largura;
    document.getElementById('hidden-altura').value = altura;
    document.getElementById('hidden-quantidade').value = quantidade;
    document.getElementById('hidden-tonalidade').value = tonalidade;
    
    // Desabilitar botão e mostrar como adicionado
    button.disabled = true;
    button.textContent = 'Adicionando...';
    
    // Submeter formulário via AJAX
    submitToCart(index, itemValue, quantidade);
  }
  
  function submitToCart(index, itemValue, quantidade) {
    const formData = new FormData(document.getElementById('variant-form'));
    
    // Primeiro, tentar com fetch/AJAX
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: variantId,
        quantity: 1,
        properties: {
          'Largura': formData.get('properties[Largura]'),
          'Altura': formData.get('properties[Altura]'),
          'Quantidade': formData.get('properties[Quantidade]'),
          'Tonalidade': formData.get('properties[Tonalidade]')
        }
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Erro na resposta: ' + response.status);
      }
      return response.json();
    })
    .then(data => {
      console.log('Item adicionado ao carrinho via AJAX:', data);
      handleCartSuccess(index, itemValue, quantidade);
    })
    .catch(error => {
      console.error('Erro ao adicionar via AJAX, tentando método tradicional:', error);
      
      // Fallback: usar formulário tradicional
      const fallbackForm = document.getElementById('fallback-form');
      document.getElementById('fallback-largura').value = formData.get('properties[Largura]');
      document.getElementById('fallback-altura').value = formData.get('properties[Altura]');
      document.getElementById('fallback-quantidade').value = formData.get('properties[Quantidade]');
      document.getElementById('fallback-tonalidade').value = formData.get('properties[Tonalidade]');
      
      // Submeter formulário tradicional
      fallbackForm.submit();
      
      // Simular sucesso para o UI (será confirmado no reload da página)
      handleCartSuccess(index, itemValue, quantidade);
    });
  }
  
  function handleCartSuccess(index, itemValue, quantidade) {
    // Atualizar botão como sucesso
    const button = document.getElementById(`add-btn-${index}`);
    button.textContent = 'Adicionado';
    button.classList.add('added');
    
    // Atualizar totais do carrinho
    cartItems += quantidade;
    cartTotal += itemValue;
    updateCartSummary();

    // Adicionar nova linha automaticamente
    setTimeout(() => {
      addNewVariant();
    }, 500);
    
    // Publicar evento para notificar outros componentes
    if (typeof window.dispatchEvent === 'function') {
      window.dispatchEvent(new CustomEvent('cart:updated'));
    }
    
    // Tentar atualizar badge do carrinho se existir
    const cartCount = document.querySelector('.cart-count-bubble');
    if (cartCount) {
      const currentCount = parseInt(cartCount.textContent) || 0;
      cartCount.textContent = currentCount + 1;
    }
    document.querySelector('cart-drawer').open();
  }
  
  function addNewVariant() {
    variantCounter++;
    const variantList = document.getElementById('variant-list');
    const newVariant = document.createElement('div');
    newVariant.className = 'variant-item d-flex justify-content-center align-items-end';
    newVariant.setAttribute('data-variant-index', variantCounter);
    
    newVariant.innerHTML = `
      <div class="variant-number">${variantCounter}</div>
      <div class="variant-options">
        <div class="variant-option">
          <label>Largura:</label>
          <select name="largura_${variantCounter}" data-option="largura" data-index="${variantCounter}">
            <option value="1,42 m">1,42 m</option>
            <option value="1,52 m">1,52 m</option>
          </select>
        </div>
        <div class="variant-option">
          <label>Altura:</label>
          <select name="altura_${variantCounter}" data-option="altura" data-index="${variantCounter}">
            <option value="50 cm">50 cm</option>
            <option value="60 cm">60 cm</option>
            <option value="70 cm">70 cm</option>
            <option value="80 cm">80 cm</option>
            <option value="90 cm">90 cm</option>
            <option value="100 cm">100 cm</option>
          </select>
        </div>
        <div class="variant-option">
          <label>Quantidade:</label>
          <select name="quantidade_${variantCounter}" data-option="quantidade" data-index="${variantCounter}">
            ${Array.from({length: 20}, (_, i) => `<option value="${i+1}" ${i === 0 ? 'selected' : ''}>${i+1}</option>`).join('')}
          </select>
        </div>
        <div class="variant-option">
          <label>Tonalidade:</label>
          <select name="tonalidade_${variantCounter}" data-option="tonalidade" data-index="${variantCounter}">
            ${tonalidadeOptions.map(option => `<option value="${option.value}">${option.label}</option>`).join('')}
          </select>
        </div>
      </div>
      <button type="button" class="variant-add-btn" onclick="addToCart(${variantCounter})" id="add-btn-${variantCounter}">
        Adicionar
      </button>
    `;
    
    variantList.appendChild(newVariant);
  }
  
  function updateCartSummary() {
    document.getElementById('total-carrinho').innerHTML = `<b>${cartItems}</b>`;
    document.getElementById('valor-total-carrinho').textContent = `R$ ${cartTotal.toFixed(2).replace('.', ',')}`;
    document.getElementById('parcela-carrinho').textContent = `${(cartTotal / maxInstallments).toFixed(2).replace('.', ',')}`;
  }
  
  // Inicialização e debug
  document.addEventListener('DOMContentLoaded', function() {
    updateCartSummary();
    
    // Debug: verificar se o produto existe
    console.log('Produto configurado:', {
      variantId: variantId,
      basePrice: basePrice,
      maxInstallments: maxInstallments
    });
    
    // Verificar se as rotas do Shopify estão disponíveis
    console.log('Rotas do Shopify:', {
      cartAddUrl: '{{ routes.cart_add_url }}',
      cartUrl: '{{ routes.cart_url }}'
    });
    
    // Adicionar listener para eventos de carrinho
    window.addEventListener('cart:updated', function() {
      console.log('Carrinho atualizado!');
    });
  });
  
</script>

{% schema %}
  {
    "name": "Home Película Residencial",
    "tag": "section",
    "settings": [
      {
        "type": "product",
        "id": "featured_product",
        "label": "Produto em Destaque",
        "info": "Selecione o produto que será exibido nesta seção"
      },
      {
        "type": "text",
        "id": "section_title",
        "label": "Título da Seção",
        "default": "Película Nano Cerâmica Residencial"
      },
      {
        "type": "text",
        "id": "section_subtitle",
        "label": "Subtítulo",
        "default": "Compra por metro ²"
      },
      {
        "type": "range",
        "id": "max_installments",
        "label": "Número máximo de parcelas",
        "min": 1,
        "max": 12,
        "step": 1,
        "default": 5
      }
    ],
    "blocks": [
      {
        "type": "tonalidade",
        "name": "Tonalidade",
        "settings": [
          {
            "type": "text",
            "id": "value",
            "label": "Valor da Tonalidade",
            "info": "Valor que será enviado no formulário (ex: G 35, G 50)",
            "placeholder": "G 35"
          },
          {
            "type": "text",
            "id": "label",
            "label": "Nome Exibido",
            "info": "Nome que aparecerá no dropdown para o cliente",
            "placeholder": "G 35"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Home Película Residencial",
        "category": "Custom",
        "blocks": [
          {
            "type": "tonalidade",
            "settings": {
              "value": "G 35",
              "label": "G 35"
            }
          },
          {
            "type": "tonalidade",
            "settings": {
              "value": "G 50",
              "label": "G 50"
            }
          },
          {
            "type": "tonalidade",
            "settings": {
              "value": "G 70",
              "label": "G 70"
            }
          }
        ]
      }
    ]
  }
{% endschema %}